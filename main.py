import re

from aiogram import Dispatcher, executor, filters, types

from bot import PsixologyBot
from database import on_shutdown, on_startup
from settings import REVIEWS_CHANNEL, bot
from keyboards import see_reviews_channel_keyboard

dp = Dispatcher(bot)
pb_bot = PsixologyBot(messenger='tg')


@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    msg, keyboard = await pb_bot.start_command(
        user_id, username, first_name, last_name)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–û—Å–æ–∑–Ω–∞—é'))
@dp.message_handler(filters.Regexp('–ú–µ–Ω—é'))
async def realize_handler(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.realize_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)

@dp.message_handler(filters.Regexp('–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É'))
@dp.message_handler(filters.Regexp('–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ä–∞–±–æ—Ç–∫—É'))
async def start_working(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    msg, keyboard = await pb_bot.start_working(user_id, text)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–û –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–∏–∫–µ –õ–î–û–£'))
@dp.message_handler(filters.Regexp('–û –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–∏–∫–µ'))
async def about_psychotechnisc(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.about_psychotechnisc(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞'))
async def about_psychotechnisc(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.manual_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–æ–Ω—ç–π—à–Ω?'))
async def what_is_donat(message: types.Message):
    user_id = message.from_user.id
    msg = await pb_bot.what_is_donat_command(user_id)
    await bot.send_message(user_id, msg)


@dp.message_handler(filters.Regexp('–ï—Å—Ç—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å'))
async def support_resistance(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.support_resistance_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–∑—å—è–º'))
async def share_friends(message: types.Message):
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    user_id = message.from_user.id
    msg = await pb_bot.share_friends_command(user_id, bot_username)
    await bot.send_message(user_id, msg)


@dp.message_handler(filters.Regexp('–ù—É–∂–Ω—ã —Å–∏–Ω–æ–Ω–∏–º—ã –∫ .+'))
@dp.message_handler(filters.Regexp('–ù–∞–∑–∞–¥'))
async def back_handler(message: types.Message):
    user_id = message.from_user.id
    if message.text == '–ù–∞–∑–∞–¥':
        msg, keyboard = await pb_bot.back_command(user_id)
    else:
        msg, keyboard = await pb_bot.back_command(user_id, syn_new_word=True)
    if isinstance(msg, tuple):
        for m in msg:
            if isinstance(m, tuple):
                await bot.send_message(user_id, m[-1], reply_markup=keyboard)
            else:
                await bot.send_message(user_id, m, reply_markup=keyboard)
    else:
        await bot.send_message(user_id, msg, reply_markup=keyboard)



@dp.message_handler(filters.Regexp('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å .+'))
async def continue_step(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.continue_step(user_id)
    if isinstance(msg, tuple):
        for m in msg:
            if isinstance(m, tuple):
                await bot.send_message(user_id, m[-1], reply_markup=keyboard)
            else:
                await bot.send_message(user_id, m, reply_markup=keyboard)
    else:
        await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–ü–æ–¥—Å–∫–∞–∑–∫–∞'))
async def hint_handler(message: types.Message):
    user_id = message.from_user.id
    msg = await pb_bot.get_hint(user_id)
    await bot.send_message(user_id, msg)


@dp.message_handler(filters.Regexp('–ó–∞–ø—Ä–æ—Å ".+" —Ä–µ—à–µ–Ω'))
async def request_successful_handler(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.request_success(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–ö–∞–∫ –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å'))
async def how_thanks_handler(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.thanks_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)

@dp.message_handler(filters.Regexp('–í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É'))
async def write_sum(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.write_sum_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)

################################################################
@dp.message_handler(filters.Regexp('–í–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π'))
async def negative(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.negative_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(text='üé¨ –í–∏–¥–µ–æ-–ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å')
async def negative(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.resistance_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)




################################################################
@dp.message_handler(filters.Regexp('\d{3,4} —Ä—É–±.'))
async def set_tips(message: types.Message):
    user_id = message.from_user.id
    tips = re.search(r'\d{3,4}', message.text).group()
    msg, keyboard = await pb_bot.set_sum_command(user_id, tips)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
async def statistic(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.statistic_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def delete_user_statistic(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.delete_user_statistic_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(text='üíö –û—Ç–∑—ã–≤—ã')
async def reviews(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.reviews_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(text='üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã')
async def see_reviews(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.see_reviews_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤'))
async def give_reviews(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.give_reviews_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'))
async def give_reviews(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.feedback_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler(filters.Regexp('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏'))
async def see_reviews(message: types.Message):
    user_id = message.from_user.id
    msg = await pb_bot.developer_command(user_id)
    await bot.send_message(user_id, msg)


@dp.message_handler(filters.Regexp('–ù–∞—à —Å–∞–π—Ç'))
async def site(message: types.Message):
    user_id = message.from_user.id
    msg = await pb_bot.site_command(user_id)
    await bot.send_message(user_id, msg)


@dp.message_handler(filters.Regexp('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ–∞–Ω—Å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º'))
async def session_specialist(message: types.Message):
    user_id = message.from_user.id
    msg, keyboard = await pb_bot.session_specialist_command(user_id)
    await bot.send_message(user_id, msg, reply_markup=keyboard)


# @dp.callback_query_handler(lambda button: button.data == '/specialist_yes')
@dp.callback_query_handler(lambda button: button.data == '/specialist_no')
async def make_appointment(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    msg = await pb_bot.specialist_no(user_id)
    await bot.send_message(user_id, msg)


@dp.message_handler(filters.Regexp('–û—Ç –ø–æ—Ç–µ—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è'))
@dp.message_handler(filters.Regexp('–ü–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ'))
@dp.message_handler(filters.Regexp('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Å–∏—Ç—É–∞—Ü–∏–µ–π .+'))
@dp.message_handler(filters.Regexp('–ù–∏—á–µ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ –∏—Å–ø—ã—Ç—ã–≤–∞—é'))
@dp.message_handler(text='–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç—Å—è')
@dp.message_handler(filters.Regexp('–î—Ä—É–≥–∞—è —ç–º–æ—Ü–∏—è'))
@dp.message_handler(filters.Regexp('–í—Å–ø–æ–º–Ω–∏—Ç—å –¥—Ä—É–≥—É—é —Å–∏—Ç—É–∞—Ü–∏—é'))
@dp.message_handler(filters.Regexp('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ \w+'))
@dp.message_handler(filters.Regexp('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–∏—Ç—É–∞—Ü–∏–∏ \w+'))
@dp.message_handler(filters.Regexp('–¢–∞–∫–æ–π –∂–µ –ì–ù–ï–í –∏ .+ –æ—Ç .+'))
@dp.message_handler(filters.Regexp('–ü–ï–ß–ê–õ–¨ –∏ .+ –æ—Ç .+'))
@dp.message_handler(filters.Regexp('–ì–ù–ï–í –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ'))
@dp.message_handler(filters.Regexp('–ü–ï–ß–ê–õ–¨ –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ'))
@dp.message_handler(filters.Regexp('–°–¢–†–ê–• –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ'))
@dp.message_handler(filters.Regexp('–°–¢–†–ê–• –∏ .+ –æ—Ç .+'))
@dp.message_handler(filters.Regexp('–ù–ï–ü–†–ò–Ø–ó–ù–¨ –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ'))
@dp.message_handler(filters.Regexp('–ù–ï–ü–†–ò–Ø–ó–ù–¨ –∏ .+ –æ—Ç .+'))
@dp.message_handler(filters.Regexp('–°–¢–´–î –ø–æ –¥—Ä—É–≥–æ–π –ø—Ä–∏—á–∏–Ω–µ'))
@dp.message_handler(filters.Regexp('–°–¢–´–î –∏ .+ –æ—Ç .+'))
@dp.message_handler(filters.Regexp('–î–∞, –µ—Å—Ç—å –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è .+'))
@dp.message_handler(filters.Regexp('–î–∞, –µ—Å—Ç—å, –Ω–æ .+ –Ω–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è'))
@dp.message_handler(filters.Regexp('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å \w+'))
@dp.message_handler(filters.Regexp('–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É \w+'))
@dp.message_handler(filters.Regexp('–ù–∏—á–µ–≥–æ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –Ω–µ —á—É–≤—Å—Ç–≤—É—é'))
@dp.message_handler(filters.Regexp('–ì–Ω–µ–≤'))
@dp.message_handler(filters.Regexp('–°—Ç—ã–¥'))
@dp.message_handler(filters.Regexp('–°—Ç—Ä–∞—Ö'))
@dp.message_handler(filters.Regexp('–ù–µ–ø—Ä–∏—è–∑–Ω—å'))
@dp.message_handler(filters.Regexp('–ü–µ—á–∞–ª—å'))
@dp.message_handler(text='‚úÖ –î–∞')
@dp.message_handler(text='‚ùå –ù–µ—Ç')
@dp.message_handler(text='–Ø –ú—É–∂—á–∏–Ω–∞')
@dp.message_handler(text='–Ø –ñ–µ–Ω—â–∏–Ω–∞')
@dp.message_handler(filters.Regexp('–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å'))
@dp.message_handler(filters.Regexp('–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏'))
@dp.message_handler(filters.Regexp('–ù–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞'))
@dp.message_handler(filters.Regexp('–ù–∞ —Å–µ–±—è'))
@dp.message_handler(filters.Regexp('–ò—Å–ø–∞–Ω—Å–∫–∏–π —Å—Ç—ã–¥'))
@dp.message_handler(filters.Regexp('–ù–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å'))
@dp.message_handler(filters.Regexp('–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É'))
async def step_handler(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    if text in ['–Ø –ú—É–∂—á–∏–Ω–∞', '–Ø –ñ–µ–Ω—â–∏–Ω–∞']:
        variable = 'gender'
    elif text in ['–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å', '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏']:
        variable = 'rec_1_type'
    msg, keyboard = await pb_bot.next_step_command(user_id, text)
    if isinstance(msg, tuple):
        for m in msg:
            if isinstance(m, tuple):
                await bot.send_message(user_id, m[-1], reply_markup=keyboard)
            else:
                await bot.send_message(user_id, m, reply_markup=keyboard)
    else:
        await bot.send_message(user_id, msg, reply_markup=keyboard)


@dp.message_handler()
async def text_handler(message: types.Message):
    user_id = message.from_user.id
    text = message.text
    user = await pb_bot.get_user(user_id)
    if user:
        if 'feedback' in user.state:
            keyboard = await see_reviews_channel_keyboard()
            msg, keyboard, review_text = await pb_bot.set_reviews_command(user_id, text)
            m = await bot.send_message(user_id, msg, reply_markup=keyboard)
            return await bot.send_message(REVIEWS_CHANNEL, review_text)
        elif 'tips' in user.state:
            if user.state['tips'] == 'writing':
                msg, keyboard = await pb_bot.set_sum_command(user_id, text)
                return await bot.send_message(user_id, msg, reply_markup=keyboard)
    msg, keyboard = await pb_bot.set_variables(user_id, text)
    if msg is None and keyboard is None:
        return
    if isinstance(msg, tuple):
        for m in msg:
            if isinstance(m, tuple):
                await bot.send_message(user_id, m[-1], reply_markup=keyboard)
            else:
                await bot.send_message(user_id, m, reply_markup=keyboard)
    else:
        await bot.send_message(user_id, msg, reply_markup=keyboard)

if __name__ == "__main__":
    executor.start_polling(
        dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown
    )
